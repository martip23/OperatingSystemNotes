	          Lab 2 

Write a small shell - called shhh - that has the 
following capabilities:

1. Can execute a command with the accompanying arguments.  
2. Recognize multiple pipe requests and handle them.  
3. Recognize redirection requests and handle them.  
4. Type "exit" to quit the shhh shell.  


Example commands:

        shhh>  cat fred.c
	shhh>  ls -al  > output.dat
	shhh>  ls | wc  
	shhh>  linect < file.dat | stats   > out.dat
	shhh>  prog -x  | prog1 | prog2 -2 | prog3 
	shhh>  ls -al |  grep -n net  | wc > out.dat		


The shell shhh should always wait for ALL the 
commands to finish. The topology of the forked processes 
should be linear children; e.g the shell should have 
as many children as there are processes needed - 
with pipes connecting adjacent children.You may assume 
that any redirection in the command is specified like 
the third example above.  E.g. "redirection in" ( < ) 
is always specified before the first pipe appears  
and "redirection out" ( > ) is always after the last 
pipe specified. To make life easier for you, you may 
assume that only commands with correct syntax are 
typed in.  In other words don't worry about errors in 
the formation of the commands.

The partial program is available in TRACS, lab2.c.
The command parsing part is already done in the program. 
On your part, you need to implement the above functions.


How to submit?

Zip all your files and submit to TRACS.


Try the following test cases:

$ ls 

$ ls -t -al

$ ls > output.txt

And then open output.txt to see if the content is correct or not

$ ./pre < input.txt

./pre is the executable in hw1.

$ ls | more | wc


$ quit or exit (some students may use 'quit', some students may use 'exit')
